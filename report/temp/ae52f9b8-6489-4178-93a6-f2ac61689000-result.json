{"name": "正常新增用户", "status": "broken", "statusDetails": {"message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)", "trace": "self = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n.venv/lib/python3.13/site-packages/requests/models.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/json/decoder.py:345: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x1039b0440>\ns = \"<!doctype html>\\n<html lang=en>\\n  <head>\\n    <title>FileNotFoundError: [Errno 2] No such file or directory: &#39;.....^^^^^^^^^^^^^^^\\nFileNotFoundError: [Errno 2] No such file or directory: '../data/mockdata/userManage.json'\\n\\n\\n-->\\n\"\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/json/decoder.py:363: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_debug_api.TestUserManager object at 0x1097716d0>\nbase_info = {'api_name': '新增用户', 'header': {'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}, 'method': 'POST', 'url': '/dar/user/addUser'}\ntestcase = {'data': {'dates': '2023-12-31', 'password': 'tset6789890', 'phone': 13800000000, 'role_id': 123456789, ...}}\n\n>   ???\n\n/Users/liyangyong/Documents/github/Test-Automation-Framework-main/testcase/Single interface/test_debug_api.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nbase/apiutil.py:119: in specification_yaml\n    raise e\nbase/apiutil.py:101: in specification_yaml\n    allure.attach(self.allure_attach_response(res.json()), '接口响应信息', allure.attachment_type.TEXT)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n.venv/lib/python3.13/site-packages/requests/models.py:978: JSONDecodeError"}, "attachments": [{"name": "接口名称：新增用户", "source": "8fb90fcf-c6b8-49a7-bca1-494b6796631c-attachment.txt", "type": "text/plain"}, {"name": "接口地址：http://127.0.0.1:8787/dar/user/addUser", "source": "4fa248b2-682e-49e4-846c-4dbc476529ec-attachment.txt", "type": "text/plain"}, {"name": "请求方法：POST", "source": "59fd8911-a4db-4db1-92e0-6ed0cab33a65-attachment.txt", "type": "text/plain"}, {"name": "请求头：{'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}", "source": "cd9a63ca-454f-49f0-bf32-f59f06059a3f-attachment.txt", "type": "text/plain"}, {"name": "测试用例名称：正常新增用户", "source": "f6b1f725-1afa-4983-b8ec-cb4ee26af97e-attachment.txt", "type": "text/plain"}, {"name": "请求参数", "source": "e82f6c94-3661-4990-8eb7-c8a38216b57c-attachment.txt", "type": "text/plain"}, {"name": "log", "source": "e751ab5d-52ab-4657-b5e5-16ee4daff4fa-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "base_info", "value": "{'api_name': '新增用户', 'url': '/dar/user/addUser', 'method': 'POST', 'header': {'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}}"}, {"name": "testcase", "value": "{'case_name': '正常新增用户', 'data': {'username': 'testadduser', 'password': 'tset6789890', 'role_id': 123456789, 'dates': '2023-12-31', 'phone': 13800000000, 'token': '${get_extract_data(token)}'}, 'validation': [{'contains': {'status_code': 200}}, {'contains': {'msg': '新增成功'}}]}"}], "start": 1746970442569, "stop": 1746970442574, "uuid": "e9ff3e9d-a98f-458b-97c1-56368677d039", "historyId": "410a71bd49c749bcfcddea21ee4363f3", "testCaseId": "37cf0d175a552f57ad9469bc9f0b52e8", "fullName": "testcase.Single interface.test_debug_api.TestUserManager#test_add_user", "labels": [{"name": "story", "value": "C06_新增用户"}, {"name": "feature", "value": "M03_用户管理模块（单接口）"}, {"name": "tag", "value": "run(order=1)"}, {"name": "parentSuite", "value": "testcase.Single interface"}, {"name": "suite", "value": "test_debug_api"}, {"name": "subSuite", "value": "TestUserManager"}, {"name": "host", "value": "MacBookAirq.local"}, {"name": "thread", "value": "754-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.Single interface.test_debug_api"}]}